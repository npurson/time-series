plugins {
    id 'org.springframework.boot' version '2.4.9'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group = 'com'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    jcenter()
}

def LIBTORCH_HOME = "libtorch"
def LIBTORCH_VERSION = "1.11.0"

dependencies {
    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.pytorch:pytorch_java_only:1.9.0"
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

def BUILD_VERSION_FILE = new File(LIBTORCH_HOME, "build-version");
if (!BUILD_VERSION_FILE.isFile()) {
    throw new RuntimeException(
            "Cannot find ${BUILD_VERSION_FILE}. " +
                    "Make sure LIBTORCH_HOME refers to the root of the libtorch distribution.");
}

def installedVersion = BUILD_VERSION_FILE.readLines()[0].replace("\"", "");
def versionPattern = "^" + java.util.regex.Pattern.quote(LIBTORCH_VERSION) + "\\b.*";
if (!(installedVersion ==~ versionPattern)) {
    throw new RuntimeException(
            "Found libtorch version ${installedVersion}, but build.gradle expects ${LIBTORCH_VERSION}.");
}

// test {
//     useJUnitPlatform()
// }
